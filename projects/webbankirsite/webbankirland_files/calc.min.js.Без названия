function WbCalc(options) {
    let sumMin = parseInt($('#api_calc_sum_min').val());
    let sumMax = parseInt($('#api_calc_sum_max').val());
    let sumDefault = parseInt($('#api_calc_sum_default').val());
    let periodMin = parseInt($('#api_calc_period_min').val());
    let periodMax = parseInt($('#api_calc_period_max').val());
    let periodDefault = parseInt($('#api_calc_period_default').val());
    let sumSelected = (parseInt($.cookie('loanPrice')) >= sumMin && parseInt($.cookie('loanPrice')) <= sumMax) ? parseInt($.cookie('loanPrice')) : sumDefault;
    let periodSelected = (parseInt($.cookie('loanDays')) >= periodMin && parseInt($.cookie('loanDays')) <= periodMax) ? parseInt($.cookie('loanDays')) : periodDefault;
    let cookieDomain = $('#cookie_domain').val();
    let cookieDomainSecure = $('#cookie_domain_secure').val();
    let actionStatus = $('#action_status').val();
    let actionPeriod = $('#action_period_max_day').val();
    let defaultOptions = { sliderSum: { obj: {}, min: sumMin, max: sumMax, step: 500 }, sliderDay: { obj: {}, min: periodMin, max: periodMax, step: 1 }, sliderCredit: { obj: {}, min: 2, max: 8, step: 1 }, percentArr: { 1: 0.000, 2: 0.018, 3: 0.017, 4: 0.016, 5: 0.015, 6: 0.014, 7: 0.013, 8: 0.012, 9: 0.011, 10: 0.010, 11: 0.009 }, periodActionPercents: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0.01, 12: 0.01, 13: 0.01, 14: 0.01, 15: 0.01, 16: 0.01, 17: 0.01, 18: 0.01, 19: 0.01, 20: 0.01, 21: 0.01, 22: 0.01, 23: 0.01, 24: 0.01, 25: 0.01, 26: 0.01, 27: 0.01, 28: 0.01, 29: 0.01, 30: 0.01, 31: 0.01 }, currentSum: sumSelected, currentDay: periodSelected, currentCredit: 8, currentPercent: 0.01, currentPercentObj: {}, minCreditSum: sumMax, backgroundChange: !0, sliderSumObj: {}, sliderSumSlideObj: {}, sliderSumBarObj: {}, sliderDayObj: {}, sliderCreditObj: {}, dayTextObj: {}, creditTextObj: {}, resNewObj: {}, resLoyalObj: {}, finalDateObj: {}, sliderMaxSumText: {}, sliderMaxSumBlock: {}, sliderDescription: {}, animateCallback: function() {} };
    for (var option in defaultOptions) { var v = defaultOptions[option]; if (typeof v == 'object' && (option == 'sliderSum' || option == 'sliderDay' || option == 'sliderCredit')) { this[option] = {}; for (var _option in v) { if (options[option] && options[option][_option] && options[option][_option] !== undefined) { this[option][_option] = options[option][_option] } else { this[option][_option] = defaultOptions[option][_option] } } } else { this[option] = (options && options[option] !== undefined) ? options[option] : defaultOptions[option] } }
    if (!this.emptyObject(this.sliderMaxSumText)) { this.sliderMaxSumText.text(this.number_format(this.sliderSum.max)); if (this.sliderCredit.max == 8) { this.sliderMaxSumText.addClass("slider-max-sum") } }
    for (var sD in this.sliderDescription) { switch (sD) {
            case 'min_sum':
                this.sliderDescription[sD].text(this.number_format(this.sliderSum.min)); break;
            case 'min_day':
                this.sliderDescription[sD].text(this.number_format(this.sliderDay.min)); break;
            case 'max_day':
                this.sliderDescription[sD].text(this.number_format(this.sliderDay.max)); break;
            case 'min_credit':
                this.sliderDescription[sD].text(this.number_format(this.sliderCredit.min)); break;
            case 'max_credit':
                this.sliderDescription[sD].text(this.number_format(this.sliderCredit.max)); break } }
    var this_ = this;
    var max_sum_current = this.sliderSum.max;
    this.calc = function() {
        if (!this.emptyObject(this.currentPercentObj)) { var curPercent = parseFloat(this.currentPercentObj.text());
            this.currentPercent = (curPercent > 0) ? curPercent : this.currentPercent }
        if (!this.emptyObject(this.finalDateObj)) { var d = new Date();
            _date = (this.get(this.formatDate(d), this.currentDay - 1));
            this.finalDateObj.html(_date) }
        if (!this.emptyObject(this.dayTextObj)) { this.dayTextObj.html(this.declension(this.currentDay, ['месяц', 'месяца', 'месяцев'])) }
        if (!this.emptyObject(this.creditTextObj)) { this.creditTextObj.html(this.declension(this.currentCredit, ['займ', 'займа', 'займов'])) }
        if (this.sliderCredit.max === this.currentCredit) { this.creditTextObj.html("и более") }
        let res_new = Math.round((this.currentSum - 0) * ((this.currentDay - 1) * this.periodActionPercents[this.currentDay]) + (this.currentSum));
        let res_loyal = Math.round((this.currentSum - 0) * ((this.currentDay - 1) * this.currentPercent) + (this.currentSum));
        if (actionStatus === '1') { res_loyal = Math.round((this.currentSum - 0) * ((this.currentDay - 1) * this.periodActionPercents[this.currentDay]) + (this.currentSum)) }
        if (!this.emptyObject(this.resNewObj)) {
            if (this.currentDay > actionPeriod) { $('.zero-notice-action').fadeOut(100).hide();
                $('.zero-notice').fadeIn(400).show() } else { $('.zero-percent-ribbon').fadeIn(200).show();
                $('.zero-notice').fadeOut(100).hide();
                $('.zero-notice-action').fadeIn(400).show() }
            this.resNewObj.html(this.number_format(res_new))
        }
        if (!this.emptyObject(this.resLoyalObj)) { this.resLoyalObj.html(this.number_format(res_loyal)) }
        $.cookie('loanPrice', this.currentSum, { 'path': '/', 'secure': cookieDomainSecure, domain: cookieDomain });
        $.cookie('loanDays', this.currentDay, { 'path': '/', 'secure': cookieDomainSecure, domain: cookieDomain });
        $.cookie('loanPercent', this.currentPercent, { 'path': '/', 'secure': cookieDomainSecure, domain: cookieDomain })
    };
    this.calc();
    this.sliderSumObj.html(this_.number_format(this.currentSum));
    this.sliderDayObj.html(this.currentDay);
    this.fixEdges = function(slider, $range, value) { if (slider.min === value) { $range.addClass('rangeslider__minimum') } else if (slider.max === value) { $range.addClass('rangeslider__maximum') } else { $range.removeClass('rangeslider__minimum').removeClass('rangeslider__maximum') } }
    this.sliderSum.obj.attr('value', this.currentSum);
    this.sliderSum.obj.attr('min', this.sliderSum.min);
    this.sliderSum.obj.attr('max', this.sliderSum.max);
    this.sliderSum.obj.attr('step', this.sliderSum.step);
    this.sliderSum.obj.rangeslider({
        polyfill: !1,
        onInit: function() { this_.fixEdges(this_.sliderSum, this.$range, this.value) },
        onSlide: function(left, value, el) {
            this_.currentSum = value;
            if (this_.sliderSumObj) { this_.sliderSumObj.html(this_.number_format(value)) }
            this_.calc();
            this_.fixEdges(this_.sliderSum, this.$range, value)
        }
    });
    this.updateSumSlider = function(args, animate) {
        if (!args) { return !1 }
        if (animate && !this.emptyObject(this.sliderSumSlideObj)) {
            if (animate == 'down') { var _dir1 = 'up',
                    _dir2 = 'down' } else { var _dir2 = 'up',
                    _dir1 = 'down' }
            this.sliderSumSlideObj.hide('slide', { direction: _dir1 }, 300, function() { this_.sliderSum.obj.rangeslider('update', args);
                this_.sliderSumObj.text(this_.number_format(this_.currentSum));
                this_.sliderSumSlideObj.show('slide', { direction: _dir2 }, 300) })
        } else { this_.sliderSum.obj.rangeslider('update', args) }
    }
    this.sliderDay.obj.attr('value', this.currentDay);
    this.sliderDay.obj.attr('min', this.sliderDay.min);
    this.sliderDay.obj.attr('max', this.sliderDay.max);
    this.sliderDay.obj.attr('step', this.sliderDay.step);
    this.sliderDay.obj.rangeslider({
        polyfill: !1,
        onInit: function() { this_.fixEdges(this_.sliderDay, this.$range, this.value) },
        onSlide: function(left, value, el) {
            this_.currentDay = value;
            if (this_.sliderDayObj) { this_.sliderDayObj.html(value) }
            this_.calc();
            this_.fixEdges(this_.sliderDay, this.$range, value)
        }
    });
    var sliderCreditClass = 'rangeslider';
    this.sliderCredit.obj.rangeslider({
        value: this_.currentCredit,
        min: this_.sliderCredit.min,
        max: this_.sliderCredit.max,
        step: this_.sliderCredit.step,
        polyfill: !1,
        rangeClass: sliderCreditClass,
        onSlide: function(left, value, el) {
            if (this_.sliderCredit.max === 8 && value < 6 && max_sum_current > this_.minCreditSum) {
                var animate = !1;
                var args = { max: this_.minCreditSum };
                if (this_.currentSum > this_.minCreditSum) { this_.currentSum = this_.minCreditSum;
                    args.value = this_.minCreditSum;
                    animate = 'down' }
                max_sum_current = args.max;
                if (!this_.emptyObject(this_.sliderMaxSumText) && this_.sliderMaxSumBlock) { this_.sliderMaxSumBlock.hide('slide', { direction: 'up' }, 300, function() { this_.sliderMaxSumText.text(this_.number_format(this_.minCreditSum));
                        this_.sliderMaxSumBlock.show('slide', { direction: 'down' }, 300) }) }
                if (this_.animateCallback) { this_.animateCallback('down') }
                this_.updateSumSlider(args, animate)
            } else if (this_.sliderCredit.max === 8 && value >= 6 && max_sum_current !== this_.sliderSum.max) {
                max_sum_current = this_.sliderSum.max;
                var args = { max: this_.sliderSum.max };
                if (this_.currentSum >= this_.minCreditSum) { this_.currentSum = this_.sliderSum.max;
                    args.value = this_.sliderSum.max;
                    animate = 'top' }
                if (!this_.emptyObject(this_.sliderMaxSumText) && this_.sliderMaxSumBlock) { this_.sliderMaxSumBlock.hide('slide', { direction: 'down' }, 300, function() { this_.sliderMaxSumText.text(this_.number_format(max_sum_current));
                        this_.sliderMaxSumBlock.show('slide', { direction: 'up' }, 300) }) }
                if (this_.animateCallback) { this_.animateCallback('top') }
                this_.updateSumSlider(args, animate)
            }
            this_.currentCredit = value;
            this_.currentPercent = this_.percentArr[this_.currentCredit];
            if (!this_.emptyObject(this_.sliderCreditObj)) { this_.sliderCreditObj.html(value) }
            this_.calc()
        }
    })
}
WbCalc.prototype.formatDate = function(date) {
    var dd = date.getDate()
    if (dd < 10) dd = '0' + dd;
    var mm = date.getMonth() + 1
    if (mm < 10) mm = '0' + mm;
    var yy = date.getFullYear();
    return dd + '/' + mm + '/' + yy
}
WbCalc.prototype.number_format = function(num) { var n = num.toString(); return n.replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g, "$1 ") }
WbCalc.prototype.declension = function(num, expressions) {
    var result;
    count = num % 100;
    if (count >= 5 && count <= 20) { result = expressions['2'] } else { count = count % 10; if (count == 1) { result = expressions['0'] } else if (count >= 2 && count <= 4) { result = expressions['1'] } else { result = expressions['2'] } }
    return result
}
WbCalc.prototype.get = function(data, day) { data = data.split('/');
    data = new Date(data[2], +data[1] - 1, +data[0] + day, 0, 0, 0, 0);
    data = [data.getDate(), data.getMonth() + 1, data.getFullYear()];
    data = data.join('.').replace(/(^|\.)(\d)(?=\.)/g, "$10$2"); return data }
WbCalc.prototype.emptyObject = function(obj) {
    for (var i in obj) { return !1 }
    return !0
}